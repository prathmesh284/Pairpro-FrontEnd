// AiCompletionProvider.js
import * as monaco from "monaco-editor";
import { GoogleGenAI } from "@google/genai";

const ai = new GoogleGenAI({
  apiKey: import.meta.env.VITE_GEMINI_API_KEY || process.env.REACT_APP_GEMINI_API_KEY
});

export const registerAiSuggestions = (language = "javascript", editor = null) => {
  monaco.languages.registerCompletionItemProvider(language, {
    triggerCharacters: [".", "(", "="],
    provideCompletionItems: async (model, position) => {
      const code = model.getValue();
      const wordInfo = model.getWordUntilPosition(position);
      const range = {
        startLineNumber: position.lineNumber,
        endLineNumber: position.lineNumber,
        startColumn: wordInfo.startColumn,
        endColumn: wordInfo.endColumn,
      };

      try {
        const result = await ai.models.generateContent({
          model: "gemini-1.5-flash",
          contents: [
            {
              role: "user",
              parts: [
                {
                  text: `Based on the following code, suggest the next relevant code snippet without explanation:\n\n${code}`
                },
              ],
            },
          ],
        });

        const suggestionText = await result.response.text();

        return {
          suggestions: [
            {
              label: "Gemini Suggestion",
              kind: monaco.languages.CompletionItemKind.Snippet,
              insertText: suggestionText.trim(),
              range,
              detail: "Generated by Gemini AI",
              documentation: "Auto-completion powered by Google Gemini",
            },
          ],
        };
      } catch (err) {
        console.error("Gemini suggestion error:", err);
        return { suggestions: [] };
      }
    },
  });

  if (editor) {
    editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyI, () => {
      editor.trigger("keyboard", "editor.action.triggerSuggest", {});
    });
  }
};

export const getAiSuggestionForSelection = async (selectedCode) => {
  try {
    const result = await ai.models.generateContent({
      model: "gemini-1.5-flash",
      contents: [
        {
          role: "user",
          parts: [
            {
              text: `Improve or suggest edits for this code:\n\n${selectedCode}\n\nRespond only with a code snippet.`,
            },
          ],
        },
      ],
    });

    return result.response.text().trim();
  } catch (err) {
    console.error("Error fetching suggestion:", err);
    return "Error fetching suggestion. Check console.";
  }
};
